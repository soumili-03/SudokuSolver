#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QTableWidgetItem>
#include <QMessageBox>
#include "CustomTableWidget.h" // Include the custom header

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);

    // Replace QTableWidget with CustomTableWidget
    // ui->sudokuTable = new CustomTableWidget(this);


    //Remove row and column headers
    ui->sudokuTable->horizontalHeader()->setVisible(false);
    ui->sudokuTable->verticalHeader()->setVisible(false);

    // // Ensure the table is correctly sized
    ui->sudokuTable->setRowCount(9);
    ui->sudokuTable->setColumnCount(9);
     int tableSize = 450; // Adjust as needed
     ui->sudokuTable->setFixedSize(tableSize, tableSize);


    //Calculate and set the size for each cell
    int cellSize = tableSize / 9;
    for (int i = 0; i < 9; ++i) {
        ui->sudokuTable->setRowHeight(i, cellSize);
        ui->sudokuTable->setColumnWidth(i, cellSize);
    }

    ui->hline3->
        ui->hline6->
        ui->vline3->
        ui->vline6->


    // Populate the table
    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) {
            ui->sudokuTable->setItem(i, j, new QTableWidgetItem());
            ui->sudokuTable->item(i, j)->setTextAlignment(Qt::AlignCenter);
        }
    }

}


MainWindow::~MainWindow()
{
    delete ui;
}

bool MainWindow::isValid(std::vector<std::vector<char>> &board, int row, int col, char c)
{
    for (int i = 0; i < 9; i++)
    {
        if (board[i][col] == c)
            return false;
        if (board[row][i] == c)
            return false;
        if (board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c)
            return false;
    }
    return true;
}

bool MainWindow::solve(std::vector<std::vector<char>> &board)
{
    for (int i = 0; i < board.size(); i++)
    {
        for (int j = 0; j < board[0].size(); j++)
        {
            if (board[i][j] == '.')
            {
                for (char c = '1'; c <= '9'; c++)
                {
                    if (isValid(board, i, j, c))
                    {
                        board[i][j] = c;

                        if (solve(board) == true)
                            return true;
                        else
                            board[i][j] = '.';
                    }
                }
                return false; // for none of the numbers can be put in a cell
            }
        }
    }
    return true; // for all cells are filled
}

void MainWindow::solveSudoku(std::vector<std::vector<char>> &board)
{
    solve(board);
}

std::vector<std::vector<char>> MainWindow::getBoardFromUI()
{
    std::vector<std::vector<char>> board(9, std::vector<char>(9, '.'));

    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) {
            QString cellText = ui->sudokuTable->item(i, j)->text();
            if (!cellText.isEmpty() && cellText[0].isDigit()) {
                board[i][j] = cellText[0].toLatin1();
            }
        }
    }
    return board;
}

void MainWindow::updateBoard(std::vector<std::vector<char>> &board)
{
    for (int i = 0; i < 9; ++i) {
        for (int j = 0; j < 9; ++j) {
            ui->sudokuTable->item(i, j)->setText(QString(board[i][j]));
        }
    }
}

void MainWindow::on_solveButton_clicked()
{
    std::vector<std::vector<char>> board = getBoardFromUI();
    if (solve(board)) {
        updateBoard(board);
    } else {
        QMessageBox::warning(this, "Sudoku Solver", "No solution exists for the given Sudoku.");
    }
}
















